
#Область ПрограммныйИнтерфейс

#Область НастройкиИнтеграцииRabbitMQ

// Функция - Возвращает настройки отправки сообщений.
//
// Параметры:
//  ТипОбъектаИнтеграции - Строка - Полное имя объекта метаданных.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - .
//
Функция НастройкиОтправкиСообщений(ТипОбъектаИнтеграции = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Т.ТипОбъектаИнтеграции КАК ТипОбъектаИнтеграции,
		|	Т.ТочкаОбмена КАК ТочкаОбмена,
		|	Т.КлючМаршрутизации КАК КлючМаршрутизации
		|ИЗ
		|	РегистрСведений.НастройкиОтправкиСообщенийRabbitMQ КАК Т
		|ГДЕ
		|	ВЫБОР
		|			КОГДА &ОтбиратьПоТипуОбъектаИнтеграции
		|				ТОГДА Т.ТипОбъектаИнтеграции = &ТипОбъектаИнтеграции
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ
		|	И Т.Использовать";
	Запрос.УстановитьПараметр("ТипОбъектаИнтеграции", ТипОбъектаИнтеграции);
	Запрос.УстановитьПараметр("ОтбиратьПоТипуОбъектаИнтеграции", ЗначениеЗаполнено(ТипОбъектаИнтеграции));
	
	ТаблицаНастройки = Запрос.Выполнить().Выгрузить();
	
	Возврат ТаблицаНастройки;
	
КонецФункции

// Функция - Возвращает настройки получения сообщений.
//
// Возвращаемое значение:
//  ТаблицаЗначений - .
//
Функция НастройкиПолученияСообщений() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Т.ТипОбъектаИнтеграции КАК ТипОбъектаИнтеграции,
		|	Т.Очередь КАК Очередь
		|ИЗ
		|	РегистрСведений.НастройкиПолученияСообщенийRabbitMQ КАК Т
		|ГДЕ
		|	Т.Использовать";
	
	ТаблицаНастройки = Запрос.Выполнить().Выгрузить();
	
	Возврат ТаблицаНастройки;
	
КонецФункции

#КонецОбласти

#Область РегистрацияОбъектовДляВыгрузкиВRabbitMQ

// Процедура - Зарегистрировать документы для выгрузки в rabbit MQ
//
// Параметры:
//  Источник		 - ОпределяемыйТип.ОбъектИнтеграцииRabbitMQ - Документ-источник.
//  Отказ			 - Булево - Признак отказа от проведения.
//  РежимПроведения	 - РежимПроведенияДокумента - .
//
Процедура ЗарегистрироватьДокументыДляВыгрузки(Источник, Отказ, РежимПроведения) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.ПроверкаКандидатаСлужбойБезопасности") Тогда
		Если Источник.ПроверкаЗавершена Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТипОбъектаИнтеграции = Источник.Метаданные().ПолноеИмя();
	ТаблицаНастройкиОтправкиСообщений = НастройкиОтправкиСообщений(ТипОбъектаИнтеграции);
	
	Если ТаблицаНастройкиОтправкиСообщений.Количество() > 0 Тогда
		МенеджерЗаписи = РегистрыСведений.ЗарегистрированныеОбъектыДляВыгрузкиВRabbitMQ.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.ОбъектИнтеграции = Источник.Ссылка;
		МенеджерЗаписи.Записать();
	КонецЕсли;
	
КонецПроцедуры

// Процедура - Зарегистрировать исходящее сообщение
//
// Параметры:
//  ОбъектИнтеграции	 - ОпределяемыйТип.ОбъектИнтеграцииRabbitMQ - .
//  ТочкаОбмена			 - Строка - 
//  КлючМаршрутизации	 - Строка - 
//  ТелоСообщения		 - Строка - 
//
Процедура ЗарегистрироватьИсходящееСообщение(ОбъектИнтеграции, ТочкаОбмена, КлючМаршрутизации, ТелоСообщения) Экспорт
	
	МенеджерЗаписи = РегистрыСведений.ИсходящиеСообщенияRabbitMQ.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.ОбъектИнтеграции = ОбъектИнтеграции;
	МенеджерЗаписи.ТочкаОбмена = ТочкаОбмена;
	МенеджерЗаписи.КлючМаршрутизации = КлючМаршрутизации;
	МенеджерЗаписи.ТелоСообщения = ТелоСообщения;
	МенеджерЗаписи.ДатаОтправки = ТекущаяУниверсальнаяДатаВМиллисекундах();
	МенеджерЗаписи.Записать();
	
КонецПроцедуры

// Процедура - Зарегистрировать исходящее сообщение
//
// Параметры:
//  ОбъектИнтеграции	 - ОпределяемыйТип.ОбъектИнтеграцииRabbitMQ - .
//  Очередь				 - Строка - 
//  ТелоСообщения		 - Строка - 
//
Процедура ЗарегистрироватьВходящееСообщение(ОбъектИнтеграции, Очередь, ТелоСообщения) Экспорт
	
	МенеджерЗаписи = РегистрыСведений.ВходящиеСообщенияRabbitMQ.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.ОбъектИнтеграции = ОбъектИнтеграции;
	МенеджерЗаписи.Очередь = Очередь;
	МенеджерЗаписи.ТелоСообщения = ТелоСообщения;
	МенеджерЗаписи.ДатаПолучения = ТекущаяУниверсальнаяДатаВМиллисекундах();
	МенеджерЗаписи.Записать();
	
КонецПроцедуры

// Процедура - Удалить объект интеграции из регистрации для выгрузки
//
// Параметры:
//  ОбъектИнтеграции - ОпределяемыйТип.ОбъектИнтеграцииRabbitMQ - .
//
Процедура УдалитьОбъектИнтеграцииИзРегистрацииДляВыгрузки(ОбъектИнтеграции) Экспорт
	
	МенеджерЗаписи = РегистрыСведений.ЗарегистрированныеОбъектыДляВыгрузкиВRabbitMQ.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.ОбъектИнтеграции = ОбъектИнтеграции;
	МенеджерЗаписи.Прочитать();
	Если МенеджерЗаписи.Выбран() Тогда
		МенеджерЗаписи.Удалить();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область РегламентныеЗадания

Процедура ОтправкаСообщенийRabbitMQ() Экспорт
	
	ВремяНачала = ОценкаПроизводительности.НачатьЗамерВремени();
	
	ТаблицаНастройкиОтправкиСообщений = НастройкиОтправкиСообщений();
	ПараметрыПодключения = ИнтеграцияRabbitMQПовтИсп.ПараметрыПодключения();
	КомпонентаRabbitMQ = ПолучитьКомпоненту();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Т.ОбъектИнтеграции КАК ОбъектИнтеграции
		|ИЗ
		|	РегистрСведений.ЗарегистрированныеОбъектыДляВыгрузкиВRabbitMQ КАК Т";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ОбъектИнтеграции = Выборка.ОбъектИнтеграции;
		ТипОбъектаИнтеграции = ОбъектИнтеграции.Метаданные().ПолноеИмя();
		
		Если ТипЗнч(ОбъектИнтеграции) = Тип("ДокументСсылка.ПроверкаКандидатаСлужбойБезопасности") Тогда
			ТелоСообщения = СформироватьJSONДокументаПроверкаКандидата(ОбъектИнтеграции);
		Иначе
			ТелоСообщения = СформироватьJSONУниверсально(Выборка.ОбъектИнтеграции.ПолучитьОбъект());
		КонецЕсли;
		
		ПараметрыОтбора = Новый Структура("ТипОбъектаИнтеграции", ТипОбъектаИнтеграции);
		НастройкиРегистрации = ТаблицаНастройкиОтправкиСообщений.НайтиСтроки(ПараметрыОтбора);
		
		Для Каждого НастройкаРегистрации Из НастройкиРегистрации Цикл
			
			ТочкаОбмена = НастройкаРегистрации.ТочкаОбмена;
			КлючМаршрутизации = НастройкаРегистрации.КлючМаршрутизации;
			
			Попытка
				
				КомпонентаRabbitMQ.Connect(
					ПараметрыПодключения.Адрес,
					ПараметрыПодключения.Порт,
					ПараметрыПодключения.Логин,
					ПараметрыПодключения.Пароль,
					ПараметрыПодключения.ВиртуальныйХост);
				
				КомпонентаRabbitMQ.BasicPublish(
					ТочкаОбмена,
					КлючМаршрутизации,
					ТелоСообщения,
					1,
					Ложь);
				
				ЗарегистрироватьИсходящееСообщение(ОбъектИнтеграции, ТочкаОбмена, КлючМаршрутизации, ТелоСообщения);
				
				УдалитьОбъектИнтеграцииИзРегистрацииДляВыгрузки(ОбъектИнтеграции);
				
			Исключение
				ШаблонСообщения = НСтр("ru = 'Не удалось отправить сообщение в RabbitMQ. Объект %1, точка обмена: %2, ошибка: %3'");
				ОписаниеОшибки = СтрШаблон(ШаблонСообщения, ОбъектИнтеграции, ТочкаОбмена,
					ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				ЗаписьЖурналаРегистрации("Отправка сообщений в RabbitMQ", УровеньЖурналаРегистрации.Ошибка,,, ОписаниеОшибки);
			КонецПопытки;
			
		КонецЦикла;
		
	КонецЦикла;
	
	ОценкаПроизводительности.ЗакончитьЗамерВремени("ОтправкаСообщенийRabbitMQ", ВремяНачала);
	
КонецПроцедуры

Процедура ПолучениеСообщенийRabbitMQ() Экспорт
	
	КомпонентаRabbitMQ = ПолучитьКомпоненту();
	ПараметрыПодключения = ИнтеграцияRabbitMQПовтИсп.ПараметрыПодключения();
	ТаблицаНастройкиПолученияСообщений = НастройкиПолученияСообщений();
	
	Попытка
		КомпонентаRabbitMQ.Connect(
			ПараметрыПодключения.Адрес,
			ПараметрыПодключения.Порт,
			ПараметрыПодключения.Логин,
			ПараметрыПодключения.Пароль,
			ПараметрыПодключения.ВиртуальныйХост);
	Исключение
		ЗаписьЖурналаРегистрации("Получение сообщений в RabbitMQ", УровеньЖурналаРегистрации.Ошибка,,, "Не удалось получить сообщения RabbitMQ.");
		ВызватьИсключение КомпонентаRabbitMQ.GetLastError();
	КонецПопытки;
	
	Для Каждого СтрокаНастройка Из ТаблицаНастройкиПолученияСообщений Цикл
		
		Очередь = СтрокаНастройка.Очередь;
		ТелоСообщения = "";
		
		НачатьТранзакцию();
		Попытка
			Потребитель = КомпонентаRabbitMQ.BasicConsume(Очередь, "", Истина, Ложь, 0);
			Пока КомпонентаRabbitMQ.BasicConsumeMessage("", ТелоСообщения, 5) Цикл
				
				ДанныеСтруктура = ОбщегоНазначения.JSONВЗначение(ТелоСообщения,, Ложь);
				Если ДанныеСтруктура.type = "documentVerificationCandidate" Тогда
					ОбъектИнтеграции = ЗагрузитьДокументПроверкаКандидата(ДанныеСтруктура);
				КонецЕсли;
				
				ЗарегистрироватьВходящееСообщение(ОбъектИнтеграции, Очередь, ТелоСообщения);
				
				КомпонентаRabbitMQ.BasicAck();
			КонецЦикла;
			
			КомпонентаRabbitMQ.BasicCancel("");
			
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			
			ШаблонСообщения = НСтр("ru = 'Ошибка получения сообщений очереди ""%1"". Ошибка: %2'");
			ОписаниеОшибки = СтрШаблон(ШаблонСообщения, Очередь, ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации("Получение сообщений в RabbitMQ", УровеньЖурналаРегистрации.Ошибка,,,ОписаниеОшибки);
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область КомпонентаИнтеграцииRabbitMQ

Функция ПолучитьКомпоненту() Экспорт

	КлиентКомпоненты = Неопределено;
	Если Не ИнициализироватьКомпоненту(КлиентКомпоненты) Тогда
		
		РезультатПодключения = ПодключитьВнешнююКомпоненту("ОбщийМакет.КомпонентаRabbitMQ", "BITERP", ТипВнешнейКомпоненты.Native);
		
		Если РезультатПодключения Тогда
			ИнициализироватьКомпоненту(КлиентКомпоненты);
		КонецЕсли;
	КонецЕсли;
	
	Возврат КлиентКомпоненты;
	
КонецФункции

Функция ИнициализироватьКомпоненту(Компонента)
	
	Попытка
		Компонента = Новый("AddIn.BITERP.PinkRabbitMQ");
		Возврат Истина;
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция СформироватьJSONДокументаПроверкаКандидата(ДокументСсылка)
	
	ДанныеДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументСсылка,
		"Номер, Дата, Кандидат.Наименование, Кандидат.СерияПаспорта, Кандидат.НомерПаспорта");
	
	ДанныеСтруктура = Новый Структура;
	ДанныеСтруктура.Вставить("type", "documentVerificationCandidate");
	ДанныеСтруктура.Вставить("docID", Строка(ДокументСсылка.УникальныйИдентификатор()));
	ДанныеСтруктура.Вставить("docNumber", ДанныеДокумента.Номер);
	ДанныеСтруктура.Вставить("docDate", ЗаписатьДатуJSON(ДанныеДокумента.Дата, ФорматДатыJSON.ISO));
	ДанныеСтруктура.Вставить("candidateName", ДанныеДокумента.КандидатНаименование);
	ДанныеСтруктура.Вставить("candidatePassportSeries", ДанныеДокумента.КандидатСерияПаспорта);
	ДанныеСтруктура.Вставить("candidatePassportNumber", ДанныеДокумента.КандидатНомерПаспорта);
	
	ТекстJSON = ОбщегоНазначения.ЗначениеВJSON(ДанныеСтруктура);
	
	Возврат ТекстJSON;
	
КонецФункции

Функция СформироватьJSONУниверсально(ОбъектИнтеграции)
	
	Сериализатор = Новый СериализаторXDTO(ФабрикаXDTO);
	
	Запись = Новый ЗаписьJSON;
	Запись.УстановитьСтроку();
	Сериализатор.ЗаписатьJSON(Запись, ОбъектИнтеграции, НазначениеТипаXML.Явное);
	ТекстJSON = Запись.Закрыть();
	
	Возврат ТекстJSON;
	
КонецФункции

Функция ЗагрузитьДокументПроверкаКандидата(ДанныеСтруктура)
	
	УИ = Новый УникальныйИдентификатор(ДанныеСтруктура.docID);
	ДокументСсылка = Документы.ПроверкаКандидатаСлужбойБезопасности.ПолучитьСсылку(УИ);
	
	ДокументОбъект = ДокументСсылка.ПолучитьОбъект();
	ДокументОбъект.СостояниеПроверки = Перечисления.СостоянияПроверкиКандидатов[ДанныеСтруктура.Status];
	ДокументОбъект.ПроверкаЗавершена = Истина;
	ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
	
	Возврат ДокументСсылка;
	
КонецФункции

#КонецОбласти

#КонецОбласти

